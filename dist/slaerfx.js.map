{"version":3,"file":"slaerfx.js","sources":["../source/core/engine.js","../source/index.js"],"sourcesContent":["\r\nvar pipeline = [],\r\n    middlewares = {},\r\n    runToken;\r\n\r\n/*!\r\nAppends middleware(s) to the pipeline via installer factory functions\r\n*/\r\nexport function use(middleware, config) {\r\n  if (typeof middleware === 'string') {\r\n    var id = middleware;\r\n    middleware = middlewares[id];\r\n\r\n    if (!middleware) {\r\n      console.warn(\"MIDDLEWARE NOT FOUND:\", id);\r\n      return;\r\n    }\r\n  }\r\n\r\n  var elements = middleware(config || {});\r\n\r\n  if (typeof elements === 'function') {\r\n    elements = [ elements ];\r\n  }\r\n  \r\n  pipeline = pipeline.concat(elements);\r\n}\r\n\r\n/*!\r\nRegisters a middleware installer\r\n*/\r\nexport function middleware(id, installer) {\r\n  middlewares[id] = installer;\r\n}\r\n\r\n/*!\r\nStarts the engine\r\n*/\r\nexport function start() {\r\n  console.log(\"Start your engines...\");\r\n\r\n  var i, N;\r\n  (function loop() {\r\n    var state, result;\r\n    for (i = 0, N = pipeline.length; i < N; i++) {\r\n      result = pipeline[i](state);\r\n\r\n      if (result) {\r\n        state = result;\r\n      }\r\n    }\r\n\r\n    runToken = setTimeout(loop, 1000);\r\n  }());\r\n}\r\n\r\n/*!\r\nStops the engine\r\n*/\r\nexport function stop() {\r\n  clearTimeout(runToken);\r\n  runToken = null;\r\n}\r\n","\r\n\r\n/*!\r\nThis setups up a fake browser environment when testing\r\n*/\r\n// if (!window && global) {\r\n//   var jsdom = require('jsdom').JSDOM;\r\n//   var dom = new jsdom('');\r\n\r\n//   global.window = dom.window;\r\n//   global.document = dom.window.document;\r\n\r\n//   window.requestAnimationFrame = window.requestAnimationFrame || function(fn) {\r\n//     return setTimeout(fn, 166);\r\n//   }\r\n//   window.cancelAnimationFrame = window.requestAnimationFrame || function(cancellationToken) {\r\n//     return cancelTimeout(cancellationToken);\r\n//   }\r\n// }\r\n\r\n/// The version number\r\n//export const version = VERSION;\r\n\r\n// Export the core api modules\r\n//export * from './core/app';\r\n// export * from './core/config';\r\n// export * from './core/entities';\r\n// export * from './core/objects';\r\n// export * from './core/behaviours';\r\nexport * from './core/engine';\r\n// export * from './core/utils';\r\n\r\n// Export the rendering api modules\r\n// export * from './rendering/surfaces'\r\n\r\n// Import the stuff we need for init\r\n// import { config } from './core/config';\r\n// import { start } from './core/engine';\r\n\r\n// Initialise the bootstrapper\r\n// window.addEventListener('load', function() {\r\n//   if (config('autorun')) {\r\n//     start();\r\n//   }\r\n// });\r\n\r\n"],"names":[],"mappings":";;;;;;AACA,IAAI,QAAQ,GAAG,EAAE;IACb,WAAW,GAAG,EAAE;IAChB,QAAQ,CAAC;;;;;AAKb,AAAO,SAAS,GAAG,CAAC,UAAU,EAAE,MAAM,EAAE;EACtC,IAAI,OAAO,UAAU,KAAK,QAAQ,EAAE;IAClC,IAAI,EAAE,GAAG,UAAU,CAAC;IACpB,UAAU,GAAG,WAAW,CAAC,EAAE,CAAC,CAAC;;IAE7B,IAAI,CAAC,UAAU,EAAE;MACf,OAAO,CAAC,IAAI,CAAC,uBAAuB,EAAE,EAAE,CAAC,CAAC;MAC1C,OAAO;KACR;GACF;;EAED,IAAI,QAAQ,GAAG,UAAU,CAAC,MAAM,IAAI,EAAE,CAAC,CAAC;;EAExC,IAAI,OAAO,QAAQ,KAAK,UAAU,EAAE;IAClC,QAAQ,GAAG,EAAE,QAAQ,EAAE,CAAC;GACzB;;EAED,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;CACtC;;;;;AAKD,AAAO,SAAS,UAAU,CAAC,EAAE,EAAE,SAAS,EAAE;EACxC,WAAW,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC;CAC7B;;;;;AAKD,AAAO,SAAS,KAAK,GAAG;EACtB,OAAO,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;;EAErC,IAAI,CAAC,EAAE,CAAC,CAAC;EACT,CAAC,SAAS,IAAI,GAAG;IACf,IAAI,KAAK,EAAE,MAAM,CAAC;IAClB,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;MAC3C,MAAM,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;;MAE5B,IAAI,MAAM,EAAE;QACV,KAAK,GAAG,MAAM,CAAC;OAChB;KACF;;IAED,QAAQ,GAAG,UAAU,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;GACnC,EAAE,EAAE;CACN;;;;;AAKD,AAAO,SAAS,IAAI,GAAG;EACrB,YAAY,CAAC,QAAQ,CAAC,CAAC;EACvB,QAAQ,GAAG,IAAI,CAAC;CACjB;;AChCD;;;;;;;;;;;;;;MAcM,;;;;;,;;,;;"}